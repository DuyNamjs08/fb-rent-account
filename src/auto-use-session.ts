import { chromium, BrowserContext } from 'playwright';
import fs from 'fs';
import path from 'path';

export const autoChangePartner = async (data: any) => {
  const { bm_id = '', ads_account_id = '725667773735916' } = data;
  const browser = await chromium.launch({
    headless: false,
  });
  let result = 0;
  // ƒê∆∞·ªùng d·∫´n cookie c≈© v√† m·ªõi
  const oldCookiesPath = path.resolve(__dirname, '../fb-cookies.json'); // cookies d·∫°ng Playwright  // cookies d·∫°ng array
  const storageStatePath = path.resolve(
    __dirname,
    '../fb-cookies-browser.json',
  );
  // N·∫øu file cookies c≈© t·ªìn t·∫°i nh∆∞ng ch∆∞a ƒë√∫ng ƒë·ªãnh d·∫°ng storageState, th√¨ chuy·ªÉn ƒë·ªïi
  if (fs.existsSync(oldCookiesPath) && !fs.existsSync(storageStatePath)) {
    console.log('‚öôÔ∏è ƒêang chuy·ªÉn ƒë·ªïi cookie c≈© sang ƒë·ªãnh d·∫°ng Playwright...');
    const rawCookies = JSON.parse(fs.readFileSync(oldCookiesPath, 'utf-8'));
    const storageState = {
      cookies: rawCookies,
      origins: [],
    };
    fs.writeFileSync(storageStatePath, JSON.stringify(storageState, null, 2));
    console.log('‚úÖ ƒê√£ t·∫°o file storageState:', storageStatePath);
  }
  let context: BrowserContext;
  if (fs.existsSync(storageStatePath)) {
    console.log('‚úÖ T√¨m th·∫•y file cookies, ƒëang load...');
    try {
      context = await browser.newContext({
        storageState: storageStatePath,
        viewport: { width: 1280, height: 800 },
        locale: 'vi-VN',
      });
      console.log('üîÑ ƒê√£ load session th√†nh c√¥ng');
    } catch (error: any) {
      console.log('‚ö†Ô∏è L·ªói khi load session:', error.message);
      console.log('üîÑ T·∫°o context m·ªõi...');
      context = await browser.newContext({
        viewport: { width: 1280, height: 800 },
        locale: 'vi-VN',
      });
    }
  } else {
    console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file cookies, t·∫°o context m·ªõi');
    context = await browser.newContext({
      viewport: { width: 1280, height: 800 },
      locale: 'vi-VN',
    });
  }
  const page = await context.newPage();
  await page.goto(
    `https://business.facebook.com/latest/settings/ad_accounts?business_id=1210548737046963&selected_asset_id=${ads_account_id}&selected_asset_type=ad-account`,
  );

  try {
    await page.waitForSelector('input[type="email"]', { timeout: 5000 });
    console.log('‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p - c·∫ßn ƒëƒÉng nh·∫≠p th·ªß c√¥ng');
    await page.waitForTimeout(20000);
    await context.storageState({ path: storageStatePath });
    console.log('üíæ ƒê√£ l∆∞u session m·ªõi v√†o:', storageStatePath);
  } catch {
    console.log('‚úÖ ƒê√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng!');
  }
  try {
    const exactSelector =
      'div.x1xqt7ti.x1fvot60.xk50ysn.xxio538.x1heor9g.xuxw1ft.x6ikm8r.x10wlt62.xlyipyv.x1h4wwuj.xeuugli';

    const nameLocator = page.locator(exactSelector, {
      hasText: 'Ch·ªâ ƒë·ªãnh ƒë·ªëi t√°c',
    });

    const count = await nameLocator.count();
    console.log(
      `üîç T√¨m th·∫•y ${count} ph·∫ßn t·ª≠ ch√≠nh x√°c c√≥ text 'Ch·ªâ ƒë·ªãnh ƒë·ªëi t√°c'`,
    );

    if (count > 0) {
      await nameLocator.first().scrollIntoViewIfNeeded();
      await nameLocator.first().click();
      console.log('‚úÖ ƒê√£ click v√†o ph·∫ßn t·ª≠ ch√≠nh x√°c');
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ c·∫ßn click');
    }
  } catch (err: any) {
    console.log('‚ùå L·ªói khi click:', err.message);
  }
  try {
    await page
      .locator('input[placeholder="ID ƒë·ªëi t√°c kinh doanh"]')
      .fill(bm_id);
    console.log('‚úÖ ƒê√£ nh·∫≠p ID ƒë·ªëi t√°c kinh doanh');
  } catch (error: any) {
    console.log('‚ùå L·ªói khi nh·∫≠p ID ƒë·ªëi t√°c kinh doanh:', error.message);
  }
  try {
    const switchLocator = page.locator(
      'input[aria-label="Qu·∫£n l√Ω chi·∫øn d·ªãch (qu·∫£ng c√°o)"][role="switch"][type="checkbox"]',
    );

    await switchLocator.waitFor({ state: 'visible', timeout: 10000 });
    await switchLocator.click();
  } catch (error: any) {
    console.log('‚ùå L·ªói khi click v√†o switch:', error.message);
  }
  try {
    const divSelector =
      'div.x1xqt7ti.x1fvot60.xk50ysn.xxio538.x1heor9g.xuxw1ft.x6ikm8r.x10wlt62.xlyipyv.x1h4wwuj.xeuugli';

    const divLocator = page.locator(divSelector);

    const count = await divLocator.count();
    console.log(`üîç T·ªïng s·ªë ph·∫ßn t·ª≠ c√≥ class t∆∞∆°ng ·ª©ng: ${count}`);

    let exactIndex = -1;

    for (let i = 0; i < count; i++) {
      const text = (await divLocator.nth(i).textContent())?.trim() ?? '';
      console.log(`üîé Text ph·∫ßn t·ª≠ ${i}:`, JSON.stringify(text));

      if (text === 'Ch·ªâ ƒë·ªãnh') {
        exactIndex = i;
        break;
      }
    }

    if (exactIndex >= 0) {
      const exactLocator = divLocator.nth(exactIndex);
      await exactLocator.scrollIntoViewIfNeeded();
      await exactLocator.click({ force: true });
      console.log('‚úÖ ƒê√£ click v√†o div c√≥ text ch√≠nh x√°c "Ch·ªâ ƒë·ªãnh"');
      result = 1;
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y div c√≥ text ch√≠nh x√°c "Ch·ªâ ƒë·ªãnh"');
    }
  } catch (error: any) {
    console.log('‚ùå L·ªói khi click v√†o div "Ch·ªâ ƒë·ªãnh":', error.message);
  }
  await new Promise(() => {});
  await page.waitForTimeout(10000);
  await browser.close();
  return result;
};
