version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: rent-fb-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    # Không expose port ra ngoài
    # ports:
    #   - '6380:6379'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:17-alpine
    container_name: rent-fb-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      # Bảo mật bổ sung
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256 --auth-local=scram-sha-256'
    # Không expose port ra ngoài
    ports:
      - '127.0.0.1:5432:5432'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  app:
    build:
      context: .
      target: production # Multi-stage build
    container_name: rent-fb-app
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      REDIS_HOST: rent-fb-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@rent-fb-postgres:5432/${POSTGRES_DB}
    ports:
      - '4002:4000' # Chỉ expose port cần thiết
    # Không mount source code
    user: '1001:1001' # Non-root user
    read_only: true # Read-only filesystem
    tmpfs:
      - /tmp
      - /var/run
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
  postgres-backup:
    image: postgres:17-alpine
    container_name: rent-fb-backup
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./backups:/backups
    networks:
      - app-network
    command: |
      sh -c "
      echo 'Starting backup service...'
      while true; do
        echo 'Creating backup at $$(date)'
        pg_dump -h rent-fb-postgres -U $${POSTGRES_USER} -d $${POSTGRES_DB} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        if [ $$? -eq 0 ]; then
          echo 'Backup created successfully'
          # Xóa backup cũ hơn 7 ngày
          find /backups -name '*.sql' -mtime +7 -delete
          echo 'Old backups cleaned up'
        else
          echo 'Backup failed'
        fi
        # Backup mỗi ngày lúc 2h sáng (86400 seconds = 24 hours)
        sleep 86400
      done"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: 'json-file'
      options:
        max-size: '5m'
        max-file: '2'
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
    # internal: true
